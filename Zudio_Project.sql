-- Zudio Project:

CREATE DATABASE ZUDIO;
SELECT * FROM ZUDIO_DATA;

-- Simple Questions:-

-- Q1. Retrieve the total number of stores per state.

SELECT 
    State, COUNT(Store) AS Total_Store
FROM
    zudio_data
GROUP BY State
ORDER BY Total_Store DESC;

-- Q2). List the top 5 products by total sales revenue.

SELECT 
    Product_ID, SUM(Price) AS Total_Sales_Revenue
FROM
    zudio_data
GROUP BY Product_ID
ORDER BY Total_Sales_Revenue
LIMIT 5;

-- Q3). Get the count of orders placed in each month.

SELECT 
    Month, COUNT(*) AS Total_Orders
FROM
    zudio_data
GROUP BY Month
ORDER BY Total_Orders DESC;

-- Q4). Find the total sales generated by each store type (Owned vs. Rented).

SELECT 
    Store_Type, COUNT(*) AS Total_Sales
FROM
    zudio_data
GROUP BY Store_Type;


-- Q5). Identify the most Top 3 frequently sold clothing Type.

SELECT 
    Clothing_Type, COUNT(*) AS Total_Sales
FROM
    zudio_data
GROUP BY Clothing_Type
ORDER BY Total_Sales DESC
LIMIT 3;


-- Moderate Level (Intermediate Queries)

-- Q1). Calculate the average profit margin for each clothing type.

SELECT 
    Clothing_Type,
    ROUND(AVG(Sales_Profit), 2) AS Avgerage_Profit
FROM
    zudio_data
GROUP BY Clothing_Type
ORDER BY Avgerage_Profit DESC;


-- Q2). List the top 3 customers who have generated the highest sales revenue.

SELECT 
    Customer_Name, SUM(Price) AS Higest_Sales_Revenue
FROM
    zudio_data
GROUP BY Customer_Name
ORDER BY Higest_Sales_Revenue DESC
LIMIT 3;

       -- OR (Customer_ID) 
       
       SELECT 
    Customer_ID, SUM(Price) AS Higest_Sales_Revenue
FROM
    zudio_data
GROUP BY Customer_ID
ORDER BY Higest_Sales_Revenue DESC
LIMIT 3;



-- Q3). Determine the total quantity of products sold in each city.

SELECT 
    City, SUM(Quantity) AS Total_Products_Sold
FROM
    zudio_data
GROUP BY City
ORDER BY Total_Products_Sold DESC;



-- Q4). Identify the stores that opened in the last two years along with their sales.

SELECT 
     Store_Open_Date, COUNT(*) AS Sales
FROM
    zudio_data
WHERE
    STR_TO_DATE(Store_Open_Date, '%d-%m-%Y') >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR)
GROUP BY Store_Open_Date;



-- Q5). Analyze the sales trends by month for the current year.

SELECT 
    Month, COUNT(*) AS Sales
FROM
    zudio_data
WHERE
    YEAR(STR_TO_DATE(Order_Date, '%Y-%m-%d')) = YEAR(CURDATE())
GROUP BY Month;



-- Advanced Level (Complex Queries)

ALTER TABLE zudio_data
CHANGE COLUMN `Selling_Area_Size(sq ft)` `Selling_Area_Size` DECIMAL(10,2);

ALTER TABLE zudio_data
CHANGE COLUMN Selling_Area_Size Selling_Area_Size DECIMAL(10,2);


-- Q1).Find the state with the highest sales quantity -per square foot of selling area. 


SELECT 
    State,
    sum(Quantity/ Selling_Area_Size) AS Highest_Sales_per_Square_Foot
FROM 
    zudio_data
GROUP BY 
    State
ORDER BY 
    Highest_Sales_per_Square_Foot DESC
LIMIT 1;



-- Q2).Identify the top 5 most profitable stores(Postal_Code) and their key performance metrics (e.g., sales, profit, sales per employee).

SELECT 
    Postal_Code,
    SUM(Quantity) AS Sales,
    SUM(Sales_Profit) AS Profit,
    SUM(Quantity) / COUNT(Customer_ID) AS Sales_Per_Employee
FROM
    zudio_data
GROUP BY Postal_Code
ORDER BY Profit DESC
LIMIT 5;


-- Q3).Calculate the percentage contribution of each category to the total sales across all store.


SELECT 
    Category,
    Sum(Quantity) AS Total_Sales,
    (SUM(Quantity) / (SELECT SUM(Quantity) FROM zudio_data) * 100) AS Percentage_Contribution
FROM 
    zudio_data
GROUP BY 
    Category
ORDER BY 
    Percentage_Contribution DESC;
   
  --  OR

    SELECT 
    Category,
    COUNT(Category) AS Total_Sales,
    (COUNT(Category) / (SELECT 
            COUNT(Category)
        FROM
            zudio_data) * 100) AS Percentage_Contribution
FROM
    zudio_data
GROUP BY Category;




-- Q4).Create a cohort analysis of customers based on their first purchase month and track their monthly sales contribution.

    
  WITH first_purchase AS (
    SELECT 
        Customer_ID,
        DATE_FORMAT(MIN(STR_TO_DATE(Order_Date, '%Y-%m-%d')), '%Y-%m') AS first_purchase_month
    FROM 
        zudio_data
    WHERE 
        Order_Date IS NOT NULL
    GROUP BY 
        Customer_ID
),
monthly_sales AS (
    SELECT 
        Customer_ID,
        DATE_FORMAT(STR_TO_DATE(Order_Date, '%Y-%m-%d'), '%Y-%m') AS purchase_month,
        SUM(Quantity) AS monthly_sales
    FROM 
        zudio_data
    WHERE 
        Order_Date IS NOT NULL
    GROUP BY 
        Customer_ID, DATE_FORMAT(STR_TO_DATE(Order_Date, '%Y-%m-%d'), '%Y-%m')
)
SELECT 
    fp.first_purchase_month AS cohort_month,
    ms.purchase_month AS contribution_month,
    COUNT(DISTINCT ms.Customer_ID) AS customers_in_cohort,
    SUM(ms.monthly_sales) AS total_sales
FROM 
    first_purchase fp
JOIN 
    monthly_sales ms
ON 
    fp.Customer_ID = ms.Customer_ID
GROUP BY 
    fp.first_purchase_month, ms.purchase_month
ORDER BY 
    fp.first_purchase_month, ms.purchase_month;




-- Q5).Identify anomalies where the sales amount deviates significantly from the average store sales in the same city.


    WITH city_sales AS (
    SELECT 
        zd.Order_ID,
        zd.City,
        zd.Price,
        AVG(zd.Price) OVER (PARTITION BY zd.City) AS avg_city_sales,
        ABS(zd.Price - AVG(zd.Price) OVER (PARTITION BY zd.City)) AS deviation
    FROM 
        zudio_data zd
)
SELECT 
    Order_ID,
    City,
    Price,
    avg_city_sales,
    deviation
FROM 
    city_sales
WHERE 
    deviation > 0.3 * avg_city_sales
ORDER BY 
    deviation DESC;

